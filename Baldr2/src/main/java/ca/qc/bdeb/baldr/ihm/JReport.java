package ca.qc.bdeb.baldr.ihm;

import static ca.qc.bdeb.baldr.ihm.Observation.ANALYSE_TERMINEE;
import ca.qc.bdeb.baldr.noyau.Task;
import ca.qc.bdeb.baldr.utils.Observateur;
import java.io.File;
import java.net.URL;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import java.util.ResourceBundle;
import javax.swing.JSlider;

/**
 * Zone de texte éditable par l'utilisateur pour prendre des notes.
 *
 * @author 1344927
 */
public class JReport extends javax.swing.JPanel implements Observateur, Observer {

    private List<Observateur> observateurs;
    
    private ResourceBundle messages;
    
    /**
     * Analysis Results
     */
    public Task analys = null;
    
    private double[] valLin;
    
    private PanelTab ongletParent;
    
    /**
     * Creates new form JReport
     */
    public JReport(PanelTab ongletParent, WindowBaldr win) {
        messages = ResourceBundle.getBundle("i18n/Baldr");
        
        this.ongletParent = ongletParent;
        
        initComponents();

        // Placer les icônes du menu contextuel
        URL urlCopier = getClass().getResource("/Images/page_copy.png");
        URL urlColler = getClass().getResource("/Images/page_paste.png");
        URL urlCouper = getClass().getResource("/Images/cut_red.png");

        copier.setIcon(new javax.swing.ImageIcon(urlCopier));
        coller.setIcon(new javax.swing.ImageIcon(urlColler));
        couper.setIcon(new javax.swing.ImageIcon(urlCouper));
        
        win.getGestionnaireI18N().addObserver(this);
        ongletParent.getTask().ajouterObservateur(this);
    }
    
    private void updatePlot(double[] val, int nb) {        
        jSlider1.setMinimum(3);
        jSlider1.setMaximum(Math.max(nb, 3));
        jSlider1.setExtent(1);
        jSlider1.setValue(nb / 2);
        plot2DPanel2.removeAllPlots();
        if (Math.max(nb / 2, 3) == Math.max(3, (nb - 1))) {
            jSlider1.setVisible(false);
            jLabel9.setText(messages.getString("Classes") + "3");
        } else {
            jLabel9.setText(messages.getString("Classes") + nb / 2 + "/" + (nb - 1));
        }
        
        plot2DPanel2.removeAllPlots(); 
        try{
        plot2DPanel2.addHistogramPlot(messages.getString("Values_Histogram"), val, Math.max(nb / 2, 3));    
        }
        catch (NullPointerException e){
            
        }
        
    }
    
    public void DispatchResult() {
        if (ongletParent.getTask() != null) {
//        if (ongletParent != null) {//THREAD
            //number of analysis
            int nb = ongletParent.getTask().getResults().getNumAnalyse();
//            int nb = ongletParent.getResults().getNumAnalyse();//THREAD
            List<File> fichs;
            //files analysed
            fichs = ongletParent.getTask().getFiles();
//            fichs = ongletParent.getFiles();//THREAD
            int i, j;
            //linearized res matrix (used for renderers)
            double[] val = new double[nb];
            int a = 0;
            for (i = 0; i < fichs.size(); i++) {
                for (j = 0; j < fichs.size(); j++) {
                    if (j < i) {
                        val[a++] = ongletParent.getTask().getResults().getRes(i, j);
//                        val[a++] = ongletParent.getResults().getRes(i, j);//THREAD
                    } else {
                        break;
                    }
                }
            }
            
            valLin = val;
            updatePlot(val, nb);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        couper = new javax.swing.JMenuItem();
        copier = new javax.swing.JMenuItem();
        coller = new javax.swing.JMenuItem();
        selectAll = new javax.swing.JMenuItem();
        JtpHistogramme = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        plot2DPanel2 = new org.math.plot.Plot2DPanel();
        jSlider1 = new javax.swing.JSlider();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        zoneTexte = new javax.swing.JTextPane();

        couper.setText(messages.getString("Cut"));
        couper.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                couperActionPerformed(evt);
            }
        });
        jPopupMenu1.add(couper);

        copier.setText(messages.getString("Copy"));
        copier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copierActionPerformed(evt);
            }
        });
        jPopupMenu1.add(copier);

        coller.setText(messages.getString("Paste"));
        coller.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                collerActionPerformed(evt);
            }
        });
        jPopupMenu1.add(coller);

        selectAll.setText(messages.getString("Select_All"));
        selectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllActionPerformed(evt);
            }
        });
        jPopupMenu1.add(selectAll);

        JtpHistogramme.setName(messages.getString("Histogram"));

        jSlider1.setMinimum(3);
        jSlider1.setPaintLabels(true);
        jSlider1.setPaintTicks(true);
        jSlider1.setEnabled(false);
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });
        jSlider1.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                jSlider1CaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
        });

        jLabel9.setText(messages.getString("Classes")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSlider1, javax.swing.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE)
                    .addComponent(plot2DPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(plot2DPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        JtpHistogramme.addTab("Histogramme", jPanel1);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jScrollPane2.setAutoscrolls(true);
        jScrollPane2.setMinimumSize(new java.awt.Dimension(200, 50));

        zoneTexte.setBorder(null);
        zoneTexte.setAutoscrolls(false);
        zoneTexte.setMinimumSize(new java.awt.Dimension(200, 50));
        zoneTexte.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                zoneTexteMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(zoneTexte);

        JtpHistogramme.addTab("Notes", jScrollPane2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(JtpHistogramme, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(JtpHistogramme)
                .addContainerGap())
        );

        JtpHistogramme.getAccessibleContext().setAccessibleName("<User Code>");
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Renvoie le contenu actuel du JTextPane.
     *
     * @return texte du JTextPane
     */
    public String getText() {
        return zoneTexte.getText();
    }

    /**
     * Change le texte du JTextPane.
     *
     * @param txt
     */
    public void setText(String txt) {
        zoneTexte.setText(txt);
    }

    private void couperActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_couperActionPerformed
        zoneTexte.cut();
    }//GEN-LAST:event_couperActionPerformed

    private void copierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copierActionPerformed
        zoneTexte.copy();
    }//GEN-LAST:event_copierActionPerformed

    private void collerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_collerActionPerformed
        zoneTexte.paste();
    }//GEN-LAST:event_collerActionPerformed

    private void selectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllActionPerformed
        zoneTexte.selectAll();
    }//GEN-LAST:event_selectAllActionPerformed

    private void zoneTexteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_zoneTexteMouseClicked
        if (evt.getButton() == java.awt.event.MouseEvent.BUTTON2 || evt.getButton() == java.awt.event.MouseEvent.BUTTON3) {
            jPopupMenu1.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_zoneTexteMouseClicked

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        jLabel9.setText(messages.getString("Classes") + jSlider1.getValue() + "/" + (jSlider1.getMaximum() - 1));
        if (!((JSlider) evt.getSource()).getValueIsAdjusting()) {
            plot2DPanel2.removeAllPlots();
            System.out.println("val ch : " + jSlider1.getValue());

           try{
               plot2DPanel2.addHistogramPlot(messages.getString("Values_Histogram"), valLin, jSlider1.getValue());
           }
           catch(NullPointerException e){
               
           }
        }
        jSlider1.setEnabled(true);
    }//GEN-LAST:event_jSlider1StateChanged

    private void jSlider1CaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jSlider1CaretPositionChanged

    }//GEN-LAST:event_jSlider1CaretPositionChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane JtpHistogramme;
    private javax.swing.JMenuItem coller;
    private javax.swing.JMenuItem copier;
    private javax.swing.JMenuItem couper;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSlider jSlider1;
    private org.math.plot.Plot2DPanel plot2DPanel2;
    private javax.swing.JMenuItem selectAll;
    private javax.swing.JTextPane zoneTexte;
    // End of variables declaration//GEN-END:variables

    @Override
    public void changementEtat() {
        //A possiblement enlever
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public synchronized void changementEtat(Enum<?> property, Object o) {
        if(property == ANALYSE_TERMINEE){            
            DispatchResult();
        }
    }

    @Override
    public void update(Observable o, Object arg) {
        messages = (ResourceBundle) arg;
        
        JtpHistogramme.setTitleAt(0, messages.getString("Histogram"));
    }
}
